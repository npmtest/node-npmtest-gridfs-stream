{"/home/travis/build/npmtest/node-npmtest-gridfs-stream/test.js":"/* istanbul instrument in package npmtest_gridfs_stream */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gridfs-stream/lib.npmtest_gridfs_stream.js":"/* istanbul instrument in package npmtest_gridfs_stream */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_gridfs_stream = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_gridfs_stream = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-gridfs-stream/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-gridfs-stream && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_gridfs_stream */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_gridfs_stream\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_gridfs_stream.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_gridfs_stream.rollup.js'] =\n            local.assetsDict['/assets.npmtest_gridfs_stream.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_gridfs_stream.__dirname + '/lib.npmtest_gridfs_stream.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gridfs-stream/node_modules/gridfs-stream/index.js":"module.exports = exports = require('./lib');\n","/home/travis/build/npmtest/node-npmtest-gridfs-stream/node_modules/gridfs-stream/lib/index.js":"// gridfs-stream\n\n/**\n * Module dependencies.\n */\n\nvar GridWriteStream = require('./writestream')\nvar GridReadStream = require('./readstream')\n\n/**\n * Grid constructor\n *\n * @param {mongo.Db} db - an open mongo.Db instance\n * @param {mongo} [mongo] - the native driver you are using\n */\n\nfunction Grid (db, mongo) {\n  if (!(this instanceof Grid)) {\n    return new Grid(db, mongo);\n  }\n\n  mongo || (mongo = Grid.mongo ? Grid.mongo : undefined);\n\n  if (!mongo) throw new Error('missing mongo argument\\nnew Grid(db, mongo)');\n  if (!db) throw new Error('missing db argument\\nnew Grid(db, mongo)');\n\n  // the db must already be open b/c there is no `open` event emitted\n  // in old versions of the driver\n  this.db = db;\n  this.mongo = mongo;\n  this.curCol = this.mongo.GridStore ? this.mongo.GridStore.DEFAULT_ROOT_COLLECTION : 'fs';\n}\n\n/**\n * Creates a writable stream.\n *\n * @param {Object} [options]\n * @return Stream\n */\n\nGrid.prototype.createWriteStream = function (options) {\n  return new GridWriteStream(this, options);\n}\n\n/**\n * Creates a readable stream. Pass at least a filename or _id option\n *\n * @param {Object} options\n * @return Stream\n */\n\nGrid.prototype.createReadStream = function (options) {\n  return new GridReadStream(this, options);\n}\n\n/**\n * The collection used to store file data in mongodb.\n * @return {Collection}\n */\n\nObject.defineProperty(Grid.prototype, 'files', {\n  get: function () {\n    if (this._col) return this._col;\n    return this.collection();\n  }\n});\n\n/**\n * Changes the default collection to `name` or to the default mongodb gridfs collection if not specified.\n *\n * @param {String|undefined} name root gridfs collection name\n * @return {Collection}\n */\n\nGrid.prototype.collection = function (name) {\n  this.curCol = name || this.curCol || this.mongo.GridStore.DEFAULT_ROOT_COLLECTION;\n  return this._col = this.db.collection(this.curCol + \".files\");\n}\n\n/**\n * Removes a file by passing any options, at least an _id or filename\n *\n * @param {Object} options\n * @param {Function} callback\n */\n\nGrid.prototype.remove = function (options, callback) {\n  var _id;\n  if (options._id) {\n    _id = this.tryParseObjectId(options._id) || options._id;\n  }\n  if (!_id) {\n    _id = options.filename;\n  }\n  return this.mongo.GridStore.unlink(this.db, _id, options, callback);\n}\n\n/**\n * Checks if a file exists by passing a filename\n *\n * @param {Object} options\n * @param {Function} callback\n */\n\nGrid.prototype.exist = function (options, callback) {\n    var _id;\n    if (options._id) {\n        _id = this.tryParseObjectId(options._id) || options._id;\n    }\n    if (!_id) {\n        _id = options.filename;\n    }\n    return this.mongo.GridStore.exist(this.db, _id, options.root, callback);\n}\n\n/**\n * Find file by passing any options, at least an _id or filename\n *\n * @param {Object} options\n * @param {Function} callback\n */\n\nGrid.prototype.findOne = function (options, callback) {\n  if ('function' != typeof callback) {\n    throw new Error('findOne requires a callback function');\n  }\n  var find = {};\n  for (var n in options) {\n    if (n != 'root') {\n      find[n] = options[n];\n    }\n  }\n  if (find._id) {\n    find._id = this.tryParseObjectId(find._id) || find._id;\n  }\n  var collection = options.root  && options.root != this.curCol ? this.db.collection(options.root + \".files\") : this.files;\n  if (!collection) {\n    return callback(new Error('No collection specified'));\n  }\n  collection.find(find, function(err, cursor) {\n    if (err) { return callback(err); }\n    if (!cursor) { return callback(new Error('Collection not found')); }\n    cursor.nextObject(callback);\n  });\n}\n\n/**\n * Attemps to parse `string` into an ObjectId\n *\n * @param {GridReadStream} self\n * @param {String|ObjectId} string\n * @return {ObjectId|Boolean}\n */\n\nGrid.prototype.tryParseObjectId = function tryParseObjectId (string) {\n  try {\n    return new this.mongo.ObjectID(string);\n  } catch (_) {\n    return false;\n  }\n}\n\n/**\n * expose\n */\n\nmodule.exports = exports = Grid;\n","/home/travis/build/npmtest/node-npmtest-gridfs-stream/node_modules/gridfs-stream/lib/writestream.js":"\n/**\n * Module dependencies\n */\n\nvar util = require('util');\n//var Writable  = require('stream').Writable;\n\n// This is a workaround to implement a _flush method for Writable (like for Transform) to emit the 'finish' event only after all data has been flushed to the underlying system (GridFS). See https://www.npmjs.com/package/flushwritable and https://github.com/joyent/node/issues/7348\nvar FlushWritable = require('flushwritable');\n\n/**\n * expose\n * @ignore\n */\n\nmodule.exports = exports = GridWriteStream;\n\n/**\n * GridWriteStream\n *\n * @param {Grid} grid\n * @param {Object} options (optional)\n */\n\nfunction GridWriteStream (grid, options) {\n\tif (!(this instanceof GridWriteStream))\n\t\treturn new GridWriteStream(grid, options);\n\n\tFlushWritable.call(this);\n\tthis._opened = false;\n\tthis._opening = false;\n\tthis._writable = true;\n\tthis._closing = false;\n\tthis._destroyed = false;\n\tthis._errorEmitted = false;\n\tthis._grid = grid;\n\n\t// a bit backwards compatible\n\tif (typeof options === 'string') {\n\t\toptions = { filename: options };\n\t}\n\tthis.options = options || {};\n\tif(this.options._id) {\n\t\tthis.id = grid.tryParseObjectId(this.options._id);\n\n\t\tif(!this.id) {\n\t\t\tthis.id = this.options._id;\n\t\t}\n\t}\n\n\tthis.name = this.options.filename;  // This may be undefined, that's okay\n\n\tif (!this.id) {\n\t\t//_id not passed or unparsable? This is a new file!\n\t\tthis.id = new grid.mongo.ObjectID();\n\t\tthis.name = this.name || '';  // A new file needs a name\n\t}\n\n\tthis.mode = 'w'; //Mongodb v2 driver have disabled w+ because of possible data corruption. So only allow `w` for now.\n\n\t// The value of this.name may be undefined. GridStore treats that as a missing param\n\t// in the call signature, which is what we want.\n\tthis._store = new grid.mongo.GridStore(grid.db, this.id, this.name, this.mode, this.options);\n\n\tthis._delayedWrite = null;\n\tthis._delayedFlush = null;\n\tthis._delayedClose = null;\n\n\tvar self = this;\n\n\tself._open();\n}\n\n/**\n * Inherit from stream.Writable (FlushWritable for workaround to defer finish until all data flushed)\n * @ignore\n */\n\nutil.inherits(GridWriteStream, FlushWritable);\n\n// private api\n\n/**\n * _open\n *\n * @api private\n */\n\nGridWriteStream.prototype._open = function () {\n\tif (this._opened) return;\n\tif (this._opening) return;\n\tthis._opening = true;\n\n\tvar self = this;\n\tthis._store.open(function (err, gs) {\n\t\tself._opening = false;\n\t\tif (err) return self._error(err);\n\t\tself._opened = true;\n\t\tself.emit('open');\n\n\t\t// If _close was called during _store opening, then it was delayed until now, so do the close now\n\t\tif (self._delayedClose) {\n\t\t\tvar closed = self._delayedClose.cb;\n\t\t\tself._delayedClose = null;\n\t\t\treturn self._closeInternal(closed);\n\t\t}\n\n\t\t// If _flush was called during _store opening, then it was delayed until now, so do the flush now (it's necessarily an empty GridFS file, no _write could have been called and have finished)\n\t\tif (self._delayedFlush) {\n\t\t\tvar flushed = self._delayedFlush;\n\t\t\tself._delayedFlush = null;\n\t\t\treturn self._flushInternal(flushed);\n\t\t}\n\n\t\t// If _write was called during _store opening, then it was delayed until now, so do the write now (_flush could not have been called yet as _write has not finished yet)\n\t\tif (self._delayedWrite) {\n\t\t\tvar delayedWrite = self._delayedWrite;\n\t\t\tself._delayedWrite = null;\n\t\t\treturn self._writeInternal(delayedWrite.chunk, delayedWrite.encoding, delayedWrite.done);\n\t\t}\n\t});\n}\n\n/**\n * _writeInternal\n *\n * @api private\n */\n\nGridWriteStream.prototype._writeInternal = function (chunk, encoding, done) {\n\t// If destroy or error no more data will be written.\n\tif (!this._writable) return;\n\n\tvar self = this;\n\t// Write the chunk to the GridStore. The write head automatically moves along with each write.\n\tthis._store.write(chunk, function (err, store) {\n\t\tif (err) return self._error(err);\n\n\t\t// Emit the write head position\n\t\tself.emit('progress', store.position);\n\n\t\t// We are ready to receive a new chunk from the writestream - call done().\n\t\tdone();\n\t});\n}\n\n/**\n * _write\n *\n * @api private\n */\n\nGridWriteStream.prototype._write = function (chunk, encoding, done) {\n\tif (this._opening) {\n\t\t// if we are still opening the store, then delay the write until it is open.\n\t\tthis._delayedWrite = {chunk: chunk, encoding: encoding, done: done};\n\t\treturn;\n\t}\n\n\t// otherwise, do the write now\n\tthis._writeInternal(chunk, encoding, done);\n}\n\n/**\n * _flushInternal\n *\n * @api private\n */\n\nGridWriteStream.prototype._flushInternal = function (flushed) {\n\tthis._close(flushed);\n}\n\n/**\n * _flush\n *\n * @api private\n */\n\nGridWriteStream.prototype._flush = function (flushed) {\n\t// _flush is called when all _write() have finished (even if no _write() was called (empty GridFS file))\n\n\tif (this._opening) {\n\t\t// if we are still opening the store, then delay the flush until it is open.\n\t\tthis._delayedFlush = flushed;\n\t\treturn;\n\t}\n\n\t// otherwise, do the flush now\n\tthis._flushInternal(flushed);\n}\n\n\n/**\n * _closeInternal\n *\n * @api private\n */\n\nGridWriteStream.prototype._closeInternal = function (cb) {\n\tif (!this._opened) return;\n\tif (this._closing) return;\n\tthis._closing = true;\n\n\tvar self = this;\n\tthis._store.close(function (err, file) {\n\t\tself._closing = false;\n\t\tself._opened = false;\n\t\tif (err) return self._error(err);\n\t\tself.emit('close', file);\n\n\t\tif (cb) cb();\n\t});\n}\n\n/**\n * _close\n *\n * @api private\n */\n\nGridWriteStream.prototype._close = function _close (cb) {\n\tif (this._opening) {\n\t\t// if we are still opening the store, then delay the close until it is open.\n\t\tthis._delayedClose = { cb: cb };\n\t\treturn;\n\t}\n\n\t// otherwise, do the close now\n\tthis._closeInternal(cb);\n}\n\n/**\n * _error\n *\n * @api private\n */\n\nGridWriteStream.prototype._error = function _error (err) {\n\t// Stop receiving more data to write, emit `error` and close the store\n\tif (this._errorEmitted) return;\n\tthis._errorEmitted = true;\n\n\tthis._writable = false;\n\tthis.emit('error', err);\n\tthis._close();\n}\n\n// public api\n\n/**\n * destroy\n *\n * @api public\n */\n\nGridWriteStream.prototype.destroy = function destroy (err) {\n\t// Abort the write stream, even if write not completed\n\tif (this._destroyed) return;\n\tthis._destroyed = true;\n\n\tvar self = this;\n\tprocess.nextTick(function() {\n\t\tself._error(err);\n\t});\n}\n\n\n/**\n * destroySoon\n *\n * @api public\n * @deprecated just use destroy()\n */\n\nGridWriteStream.prototype.destroySoon = function destroySoon () {\n\treturn this.destroy();\n};","/home/travis/build/npmtest/node-npmtest-gridfs-stream/node_modules/gridfs-stream/lib/readstream.js":"\n/**\n * Module dependencies\n */\n\nvar util = require('util');\nvar Readable  = require('stream').Readable;\n\n/**\n * expose\n * @ignore\n */\n\nmodule.exports = exports = GridReadStream;\n\n/**\n * GridReadStream\n *\n * @param {Grid} grid\n * @param {Object} options\n */\n\nfunction GridReadStream (grid, options) {\n  if (!(this instanceof GridReadStream))\n    return new GridReadStream(grid, options);\n\n  Readable.call(this);\n  this._opened = false;\n  this._opening = false;\n  this._closing = false;\n  this._end = false;\n  this._needToPush = false;\n\n  this._grid = grid;\n\n  // a bit backwards compatible\n  if (typeof options === 'string') {\n    options = { filename: options };\n  }\n\n  this.options = options || {};\n\n  if(options._id) {\n    this.id = grid.tryParseObjectId(options._id);\n\n    if(!this.id) {\n      this.id = options._id;\n    }\n  }\n\n  this.name = this.options.filename || '';\n  this.mode = 'r';\n\n  // If chunk size specified use it for read chunk size otherwise default to 255k (GridStore default). chunkSize and chunk_size in mongodb api so check both.\n  this._chunkSize = this.options.chunkSize || this.options.chunk_size || 1024 * 255;\n\n  this.range = this.options.range || { startPos: 0, endPos: undefined };\n  if (typeof(this.range.startPos) === 'undefined') {\n    this.range.startPos = 0;\n  }\n\n  this._currentPos = this.range.startPos;\n\n  var options = {};\n  for (var i in this.options) { options[i] = this.options[i]; }\n  options.root || (options.root = this._grid.curCol);\n\n  this._store = new grid.mongo.GridStore(grid.db, this.id || new grid.mongo.ObjectID(), this.name, this.mode, options);\n  // Workaround for Gridstore issue https://github.com/mongodb/node-mongodb-native/pull/930\n  if (!this.id) {\n    // var REFERENCE_BY_FILENAME = 0,\n    this._store.referenceBy = 0;\n  }\n\n  var self = this;\n\n  //Close the store once `end` received\n  this.on('end', function() {\n    self._end = true;\n    self._close()\n  });\n\n  process.nextTick(function() {\n    self._open();\n  });\n}\n\n/**\n * Inherit from stream.Readable\n * @ignore\n */\n\nutil.inherits(GridReadStream, Readable);\n\n/**\n * _open\n *\n * @api private\n */\n\nGridReadStream.prototype._open = function _open () {\n  if (this._opening) return;\n  this._opening = true;\n\n  var self = this;\n\n  // Open the sore\n  this._store.open(function (err, gs) {\n    if (err) return self._error(err);\n\n    // Find the length of the file by setting the head to the end of the file and requesting the position\n    self._store.seek(0, self._grid.mongo.GridStore.IO_SEEK_END, function(err) {\n        if (err) return self._error(err);\n\n        // Request the position of the end of the file\n        self._store.tell(function(err, position) {\n        if (err) return self._error(err);\n\n            // Calculate the correct end position either from EOF or end of range. Also handle incorrect range request.\n            if (!self.range.endPos || self.range.endPos > position-1) {self.range.endPos = position - 1};\n\n            // Set the read head to the beginning of the file or start position if specified\n            self._store.seek(self.range.startPos, self._grid.mongo.GridStore.IO_SEEK_SET, function(err) {\n              if (err) return self._error(err);\n\n              // The store is now open\n              self.emit('open');\n              self._opened = true;\n\n              // If `_read()` was already called then we need to start pushing data to the stream. Otherwise `_read()` will handle this once called from stream.\n              if (self._needToPush) self._push();\n            });\n        });\n    });\n  });\n}\n\n/**\n * _read\n *\n * @api private\n */\n\n// `_read()` will be called when the stream wants to pull more data in\n// The advisory `size` argument is ignored in this case and user specified use or default to 255kk.\nGridReadStream.prototype._read = function _read (size) {\n  var self = this;\n\n  // Set `_needToPush` to true because the store may still be closed if data is immediately piped. Once the store is open `_needToPush` is checked and _push() called if necessary.\n  self._needToPush = true;\n\n  // The store must be open\n  if (!this._opened) return;\n\n  // Read data from GridStore and push to stream\n  self._push();\n}\n\n/**\n * _push\n *\n * @api private\n */\n\nGridReadStream.prototype._push = function _push () {\n  var self = this;\n\n  // Do not continue if the store is closed\n  if (!this._opened) return self._error('Unable to push data. Expected gridstore to be open');\n\n  // Check if EOF, if the full requested range has been pushed or if the stream must be destroyed. If so than push EOF-signalling `null` chunk\n  if ( !this._store.eof() && (self._currentPos <= self.range.endPos) && !this._end) {\n\n    // Determine the chunk size for the read from GridStore\n    // Use default chunk size or user specified\n    var readChunkSize = self._chunkSize\n    // Override the chunk size if the chunk size is more than the size that is left until EOF/range\n    if (self.range.endPos-self._currentPos < self._chunkSize) {readChunkSize = self.range.endPos - self._currentPos + 1};\n\n    // Read the chunk from GridSore. Head moves automatically after each read.\n    self._store.read(readChunkSize,function(err, data) {\n\n      // If error stop and close the store\n      if (err) return self._error(err);\n\n      // Advance the current position of the read head\n      self._currentPos += data.length;\n\n      // Push data\n      if (!self._end) self.push(data)\n    })\n\n\n  } else {\n    // Push EOF-signalling `null` chunk\n    this._end = true;\n    self.push(null);\n  }\n}\n\n/**\n * _close\n *\n * @api private\n */\n\nGridReadStream.prototype._close = function _close () {\n  var self = this;\n  if (!self._opened) return;\n  if (self._closing) return;\n  this._closing = true;\n\n  // Close the store and emit `close` event\n  self._store.close(function (err) {\n    if (err) return self._error(err);\n    self.emit('close');\n  });\n}\n\n/**\n * _error\n *\n * @api private\n */\n\nGridReadStream.prototype._error = function _error (err) {\n  // Set end true so that no further reads from GridSotre are possible and close the store\n  this._end = true;\n\n  // Emit the error event\n  this.emit('error', err);\n\n  // Close the gridsore if an error is received.\n  this._close()\n}\n\n/**\n * destroy\n *\n * @api public\n */\n\nGridReadStream.prototype.destroy = function destroy () {\n  // Set end true so that no further reads from GridSotre are possible and close the store\n  this._end = true;\n  this._close();\n}\n"}